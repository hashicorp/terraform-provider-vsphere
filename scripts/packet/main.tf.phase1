variable "VSPHERE_LICENSE" {
}

variable "VSPHERE_DATACENTER" {
}
  
variable "VSPHERE_CLUSTER" {                    
}

variable "VSPHERE_ESXI_TRUNK_NIC" {
}

variable "VSPHERE_RESOURCE_POOL" {
}

variable "VSPHERE_DVS_NAME" {
}
    
variable "VSPHERE_NFS_DS_NAME" {
}
  
variable "VSPHERE_PG_NAME" {
}
   
variable "VSPHERE_TEMPLATE" {}

variable "PACKET_AUTH" {}

variable "PACKET_PROJECT" {}

variable "PRIV_KEY" {}

variable "VCSA_DEPLOY_PATH" {}

variable "ESXI_VERSION" {
  default = "vmware_esxi_7_0"
}

variable "PACKET_FACILITY" {
  default = "sjc1"
}

variable ESXI_PLAN {
  default = "c3.medium.x86"
}

variable STORAGE_PLAN {
  default = "c1.small.x86"
}

variable LAB_PREFIX {
  default = ""
}

provider "packet" {
  auth_token = var.PACKET_AUTH
}

locals {
  project_id = var.PACKET_PROJECT
}

provider "vsphere" {
  user                 = "administrator@vcenter.vspheretest.internal"
  password             = "Password123!"
  vsphere_server       = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",3)
  allow_unverified_ssl = true
}

resource "packet_device" "esxi1" {
  hostname         = "${var.LAB_PREFIX}esxi1.vspheretest.internal"
  plan             = var.ESXI_PLAN
  facilities       = [var.PACKET_FACILITY]
  operating_system = var.ESXI_VERSION
  billing_cycle    = "hourly"
  project_id       = local.project_id
}

resource "packet_device_network_type" "esxi1" {
  device_id = packet_device.esxi1.id
  type = "hybrid"
}

resource "packet_device" "esxi2" {
  hostname         = "${var.LAB_PREFIX}esxi2.vspheretest.internal"
  plan             = var.ESXI_PLAN
  facilities       = [var.PACKET_FACILITY]
  operating_system = var.ESXI_VERSION
  billing_cycle    = "hourly"
  project_id       = local.project_id
}

resource "packet_device_network_type" "esxi2" {
  device_id = packet_device.esxi2.id
  type = "hybrid"
}

resource "packet_device" "storage1" {
  hostname         = "${var.LAB_PREFIX}storage1.vspheretest.internal"
  plan             = var.STORAGE_PLAN
  facilities       = [var.PACKET_FACILITY]
  operating_system = "ubuntu_20_04"
  billing_cycle    = "hourly"
  project_id       = local.project_id
  provisioner "remote-exec" {
    inline = [
      "mkdir -p /nfs/ds1 /nfs/ds2 /nfs/ds2 /nfs/ds3",
      "apt-get update",
      "apt-get install nfs-common nfs-kernel-server -y",
      "echo \"/nfs *(rw,no_root_squash)\" > /etc/exports",
      "echo \"/nfs/ds1 *(rw,no_root_squash)\" >> /etc/exports",
      "echo \"/nfs/ds2 *(rw,no_root_squash)\" >> /etc/exports",
      "echo \"/nfs/ds3 *(rw,no_root_squash)\" >> /etc/exports",
      "exportfs -a",
    ]
    connection {
      host = packet_device.storage1.network.0.address
      private_key = file(var.PRIV_KEY)
    }
  }
}

resource "packet_vlan" "vmvlan" {
  facility   = var.PACKET_FACILITY
  project_id = local.project_id
}

resource "packet_port_vlan_attachment" "vmvlan_esxi1" {
  device_id = packet_device.esxi1.id
  port_name = "eth1"
  vlan_vnid = packet_vlan.vmvlan.vxlan
}

resource "packet_port_vlan_attachment" "vmvlan_esxi2" {
  device_id = packet_device.esxi2.id
  port_name = "eth1"
  vlan_vnid = packet_vlan.vmvlan.vxlan
}

# data "packet_precreated_ip_block" "private" {
#   facility         = var.PACKET_FACILITY
#   project_id       = local.project_id
#   address_family   = 4
#   public           = false
# }

# data "packet_precreated_ip_block" "public" {
#   facility         = var.PACKET_FACILITY
#   project_id       = local.project_id
#   address_family   = 4
#   public           = true
# }

resource "local_file" "vcsa_template1" {
  content = templatefile("${path.cwd}/vcsa_deploy.json", {
    hostname       = packet_device.esxi1.network.0.address
    password       = packet_device.esxi1.root_password
    ip_address     = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",3)
    ip_prefix      = packet_device.esxi1.network.0.cidr
    gateway        = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",1)
    vcenter_fqdn   = "vcenter.vspheretest.internal"
    admin_password = "Password123!"
  })
  filename = "./tmp/vcsa1.json"
  provisioner "local-exec" {
    command = "cat ./tmp/vcsa1.json"
  }
}

resource "local_file" "vcsa_template" {
  content = templatefile("${path.cwd}/vcsa_deploy.json", {
    hostname       = packet_device.esxi1.network.0.address
    password       = packet_device.esxi1.root_password
    ip_address     = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",3)
    ip_prefix      = packet_device.esxi1.network.0.cidr
    gateway        = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",1)
    vcenter_fqdn   = "vcenter.vspheretest.internal"
    admin_password = "Password123!"
  })
  filename = "./tmp/vcsa.json"
  provisioner "local-exec" {
    command = "sleep 290; echo five more; sleep 290; TERM=xterm-256color ${var.VCSA_DEPLOY_PATH} install --accept-eula --acknowledge-ceip --no-ssl-certificate-verification --verbose --skip-ovftool-verification $(pwd)/tmp/vcsa.json"
  }
}

output "ip" {
  value = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",3)
}

resource "local_file" "devrc" {
  sensitive_content = templatefile("${path.cwd}/devrc.tpl", {
    nas_host    = packet_device.storage1.network.0.address
    esxi_host_1 = packet_device.esxi1.network.0.address
    esxi_host_2 = packet_device.esxi2.network.0.address
    vsphere_host = cidrhost("${packet_device.esxi1.network.0.address}/${packet_device.esxi1.network.0.cidr}",3)

  })
  filename = "./devrc"
}
