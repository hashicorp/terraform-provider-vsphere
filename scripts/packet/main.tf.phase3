variable "VSPHERE_LICENSE" {
}

variable "VSPHERE_DATACENTER" {
}
  
variable "VSPHERE_CLUSTER" {                    
}

variable "VSPHERE_ESXI_TRUNK_NIC" {
}

variable "VSPHERE_RESOURCE_POOL" {
}

variable "VSPHERE_DVS_NAME" {
}
    
variable "VSPHERE_NFS_DS_NAME" {
}
  
variable "VSPHERE_PG_NAME" {
}
   
variable "VSPHERE_TEMPLATE" {}

variable "PACKET_AUTH" {}

variable "PACKET_PROJECT" {}

variable "PRIV_KEY" {}

variable "ESXI_VERSION" {
  default = "vmware_esxi_7_0"
}

variable "PACKET_FACILITY" {
  default = "sv"
}

variable ESXI_PLAN {
  default = "c3.medium.x86"
}

variable STORAGE_PLAN {
  default = "c3.small.x86"
}

variable LAB_PREFIX {
  default = ""
}

provider "metal" {
  auth_token = var.PACKET_AUTH
}

provider "vsphere" {
  user                 = "administrator@vcenter.vspheretest.internal"
  password             = "Password123!"
  vsphere_server       = cidrhost("${data.metal_device.esxi1.network.0.address}/${data.metal_device.esxi1.network.0.cidr}",3)
  allow_unverified_ssl = true
}

output "ip" {
  value = cidrhost("${data.metal_device.esxi1.network.0.address}/${data.metal_device.esxi1.network.0.cidr}",3)
}

locals {
  project_id = var.PACKET_PROJECT
}

data "metal_device" "esxi1" {
  project_id = local.project_id
  hostname       = "${var.LAB_PREFIX}esxi1.vspheretest.internal"
}


resource "metal_device" "esxi1" {
  hostname         = "${var.LAB_PREFIX}esxi1.vspheretest.internal"
  plan             = var.ESXI_PLAN
  metro            = var.PACKET_FACILITY
  operating_system = var.ESXI_VERSION
  billing_cycle    = "hourly"
  project_id       = local.project_id
}

resource "metal_device_network_type" "esxi1" {
  device_id = metal_device.esxi1.id
  type = "hybrid"
}

resource "metal_device" "esxi2" {
  hostname         = "${var.LAB_PREFIX}esxi2.vspheretest.internal"
  plan             = var.ESXI_PLAN
  metro            = var.PACKET_FACILITY
  operating_system = var.ESXI_VERSION
  billing_cycle    = "hourly"
  project_id       = local.project_id
}

resource "metal_device_network_type" "esxi2" {
  device_id = metal_device.esxi2.id
  type = "hybrid"
}

resource "metal_device" "storage1" {
  hostname         = "${var.LAB_PREFIX}storage1.vspheretest.internal"
  plan             = var.STORAGE_PLAN
  metro            = var.PACKET_FACILITY
  operating_system = "ubuntu_20_04"
  billing_cycle    = "hourly"
  project_id       = local.project_id
  provisioner "remote-exec" {
    inline = [
      "mkdir -p /nfs/ds1 /nfs/ds2 /nfs/ds2 /nfs/ds3",
      "apt-get update",
      "apt-get install nfs-common nfs-kernel-server -y",
      "echo \"/nfs *(rw,no_root_squash)\" > /etc/exports",
      "echo \"/nfs/ds1 *(rw,no_root_squash)\" >> /etc/exports",
      "echo \"/nfs/ds2 *(rw,no_root_squash)\" >> /etc/exports",
      "echo \"/nfs/ds3 *(rw,no_root_squash)\" >> /etc/exports",
      "exportfs -a",
    ]
    connection {
      host = metal_device.storage1.network.0.address
      private_key = file(var.PRIV_KEY)
    }
  }
}

resource "metal_vlan" "vmvlan" {
  metro      = var.PACKET_FACILITY
  project_id = local.project_id
}

resource "metal_port_vlan_attachment" "vmvlan_esxi1" {
  device_id = metal_device.esxi1.id
  port_name = "eth1"
  vlan_vnid = metal_vlan.vmvlan.vxlan
}

resource "metal_port_vlan_attachment" "vmvlan_esxi2" {
  device_id = metal_device.esxi2.id
  port_name = "eth1"
  vlan_vnid = metal_vlan.vmvlan.vxlan
}

# data "metal_precreated_ip_block" "private" {
#   metro            = var.PACKET_FACILITY
#   project_id       = local.project_id
#   address_family   = 4
#   public           = false
# }

# data "metal_precreated_ip_block" "public" {
#   metro            = var.PACKET_FACILITY
#   project_id       = local.project_id
#   address_family   = 4
#   public           = true
# }

data "vsphere_network" "vmnet" {
  datacenter_id = vsphere_datacenter.dc.moid
  name          = "VM Network"
}

resource "vsphere_resource_pool" "pool" {
  name                    = var.VSPHERE_RESOURCE_POOL
  parent_resource_pool_id = vsphere_compute_cluster.compute_cluster.resource_pool_id
}

resource "vsphere_nas_datastore" "ds" {
  name            = var.VSPHERE_NFS_DS_NAME
  host_system_ids = [vsphere_host.host1.id, vsphere_host.host2.id]
  type            = "NFS"
  remote_hosts    = [metal_device.storage1.network.0.address]
  remote_path     = "/nfs"
}

resource "vsphere_distributed_virtual_switch" "dvs" {
  name          = var.VSPHERE_DVS_NAME
  datacenter_id = vsphere_datacenter.dc.moid

  uplinks         = ["uplink1", "uplink2"]
  active_uplinks  = ["uplink1"]
  standby_uplinks = ["uplink2"]

  host {
    host_system_id = vsphere_host.host1.id
    devices        = [var.VSPHERE_ESXI_TRUNK_NIC]
  }

  host {
    host_system_id = vsphere_host.host2.id
    devices        = [var.VSPHERE_ESXI_TRUNK_NIC]
  }

  version = "7.0.0"
}

resource "vsphere_distributed_port_group" "pg" {
  name                            = var.VSPHERE_PG_NAME
  distributed_virtual_switch_uuid = vsphere_distributed_virtual_switch.dvs.id

  //vlan_id = var.VSPHERE_PXE_VLAN
}


resource "vsphere_datacenter" "dc" {
  name = var.VSPHERE_DATACENTER
}
resource "vsphere_license" "license" {
  license_key = var.VSPHERE_LICENSE
}

data "vsphere_host_thumbprint" "esxi1" {  
  address  = metal_device.esxi1.network.0.address
  insecure = true
}  

data "vsphere_host_thumbprint" "esxi2" {  
  address  = metal_device.esxi2.network.0.address
  insecure = true
}  

resource "vsphere_compute_cluster" "compute_cluster" {
  name          = var.VSPHERE_CLUSTER
  datacenter_id = vsphere_datacenter.dc.moid
  host_managed  = true

  drs_enabled          = true
  drs_automation_level = "manual"
  ha_enabled = false
}

resource "vsphere_host" "host1" {
  hostname   = metal_device.esxi1.network.0.address
  username   = "root"
  password   = metal_device.esxi1.root_password
  license    = vsphere_license.license.license_key
  force      = true
  cluster    = vsphere_compute_cluster.compute_cluster.id
  thumbprint = data.vsphere_host_thumbprint.esxi1.id
}

resource "vsphere_host" "host2" {
  hostname   = metal_device.esxi2.network.0.address
  username   = "root"
  password   = metal_device.esxi2.root_password
  license    = vsphere_license.license.license_key
  force      = true
  cluster    = vsphere_compute_cluster.compute_cluster.id
  thumbprint = data.vsphere_host_thumbprint.esxi2.id
}

resource "vsphere_virtual_machine" "template" {
  name             = var.VSPHERE_TEMPLATE
  resource_pool_id = vsphere_compute_cluster.compute_cluster.resource_pool_id
  datastore_id     = vsphere_nas_datastore.ds.id
  datacenter_id    = vsphere_datacenter.dc.moid
  host_system_id   = vsphere_host.host2.id

  wait_for_guest_net_timeout = -1

  num_cpus = 2
  memory   = 2048
  guest_id = "other3xLinuxGuest"

  network_interface {
    network_id = vsphere_distributed_port_group.pg.id
  }

  ovf_deploy {
    remote_ovf_url = "https://storage.googleapis.com/vsphere-acctest/TinyVM/TinyVM.ovf"
    ovf_network_map = {
      "terraform-test-pg" = vsphere_distributed_port_group.pg.id
    }
  }
}

resource "vsphere_virtual_machine" "pxe" {
  name             = "pxe-server"
  resource_pool_id = vsphere_compute_cluster.compute_cluster.resource_pool_id
  datastore_id     = vsphere_nas_datastore.ds.id

  wait_for_guest_net_timeout = -1

  num_cpus = 2
  memory   = 2048
  guest_id = "other3xLinuxGuest"

  network_interface {
    network_id = data.vsphere_network.vmnet.id
  }
  network_interface {
    network_id = vsphere_distributed_port_group.pg.id
  }
  clone {
    template_uuid = vsphere_virtual_machine.template.id
  }

  disk {
    label = "disk0"
    size  = 20
  }

  cdrom {
    client_device = true
  }
}

resource "local_file" "devrc" {
  sensitive_content = templatefile("${path.cwd}/devrc.tpl", {
    nas_host    = metal_device.storage1.network.0.address
    esxi_host_1 = metal_device.esxi1.network.0.address
    esxi_host_2 = metal_device.esxi2.network.0.address
    vsphere_host = cidrhost("${metal_device.esxi1.network.0.address}/${metal_device.esxi1.network.0.cidr}",3)

  })
  filename = "./devrc"
}

resource "vsphere_content_library" "nested-library" {
  name            = "nested esxi content library"
  storage_backing = [vsphere_nas_datastore.ds.id]
  description     = "https://www.virtuallyghetto.com/2015/04/subscribe-to-vghetto-nested-esxi-template-content-library-in-vsphere-6-0.html"
}

resource "vsphere_content_library_item" "n-esxi" {
  name        = "nested esxi vm"
  description = "nested esxi template"
  library_id  = vsphere_content_library.nested-library.id
  file_url = "https://s3-us-west-1.amazonaws.com/vghetto-content-library/Nested-ESXi-VM-Template/Nested-ESXi-VM-Template.ovf"
}
